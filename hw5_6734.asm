TITLE Supavet Amornruksakul
SUBTTL 6210406734
STACK	SEGMENT	STACK
	DW 128 DUP(?)
STACK	ENDS

DATA	SEGMENT
	HANDLE	DW ?
	FNAME	DB	"park.txt",0
	BUF		DB	28 DUP(?),"$"

	DATE_IN	DB	"IN   DATE  ","$"
	TIME_TEXT DB	"   TIME ","$"
	DATE_OUT DB "OUT  DATE  ","$"
	TOTAL_TEXT DB "TOTAL","$"
	; DAY_TEXT DB " DAYS (24 hours)","$"
	; HOUR_TEXT	DB " HOURS","$"
	COST_TEXT	DB "COST","$"
	BAHT DB " BAHT","$"
	
	HOUR_TIME_IN	DB ?
	HOUR_TIME_OUT	DB ?
	MIN_TIME_IN		DB ?,"$"
	MIN_TIME_OUT	DB ?

	OUT_TIME	DB 8 DUP(?),"$"

	END_LINE	DB	13,10,"$"
	
	DAY_OUTPUT	DB 11 DUP(?)," DAYS (24 hours)",13,10,"$"
	HOUR_OUTPUT DB 16 DUP(?)," HOURS",13,10,"$"
	COST_OUTPUT DB 12 DUP(?)," BAHT",13,10,"$"

	DAY_IN	DW	?
	DAY_OUT DW	?
	MONTH_IN DW ?
	MONTH_OUT DW ?
	Y_IN DW ?
	Y_OUT DW ?
	DISTANCE_YEAR	DW ?
	END_INPUT DB 0
	DAY	DW 0
	HOUR	DW 0
	COST	DW 0
	; END_INPUT DB "00/00/0000:0000/00/0000:00"
DATA	ENDS

CODE	SEGMENT
	ASSUME	CS:CODE, DS:DATA, SS:STACK
MAIN	PROC
	MOV	AX,DATA
	MOV DS,AX		;initial DS
	MOV AH,3DH		;open file
	MOV AL,0		;open file for read
	LEA DX,FNAME	
	INT 21H
	JC	WRONG
	MOV HANDLE,AX
	
DO_LOOP:	CALL READ_INPUT
			MOV DAY,0		;set day = 0
			MOV HOUR,0		;set hour = 0
			MOV COST,0		;set cost = 0
			CALL CHECK_END_INPUT ; check "00/00/0000:0000/00/0000:00"
			CMP END_INPUT,1
			JE	WRONG
			MOV AH,9
			LEA DX,BUF
			INT 21H

			CALL CAL_TIME
			CALL CAL_COST
			CALL PRINT
			CMP END_INPUT,1     ;check 
			JNE DO_LOOP

WRONG:	MOV AH,4CH
		INT 21H			;end program
MAIN	ENDP

READ_INPUT	PROC
	MOV AH,3FH		;read file
	MOV	BX,HANDLE	;handle file is already opened
	MOV CX,28
	LEA	DX,BUF		;read buffer
	INT 21H

	RET
READ_INPUT	ENDP

CAL_TIME	PROC
	MOV CX,2
	LEA DI,BUF+11           ;change minute time in
	CALL ASCII_TO_BINARY
	MOV MIN_TIME_IN,AL

	MOV CX,2
	LEA DI,BUF+24
	CALL ASCII_TO_BINARY    ; change minute time out
	CMP AL,MIN_TIME_IN      ; check equal
	JBE	NEXT
	INC HOUR
NEXT:	MOV CX,2
	LEA DI,BUF+8    
	CALL ASCII_TO_BINARY       ;change hour in
	MOV HOUR_TIME_IN,AL

	MOV CX,2
	LEA DI,BUF+21
	CALL ASCII_TO_BINARY        ;change hour out
	CMP AL,HOUR_TIME_IN
	JB IN_MORE_THAN_OUT
	SUB AL,HOUR_TIME_IN         ;distance hour between time out and time in
	ADD HOUR,AX
	JMP NEXT2
IN_MORE_THAN_OUT: MOV BL,24
	SUB BL,HOUR_TIME_IN
	ADD AL,BL
	ADD HOUR,AX

NEXT2: MOV CX,2
	LEA DI,BUF
	CALL ASCII_TO_BINARY        ;change day in to binary
	MOV DAY_IN,AX

	MOV CX,2
	LEA DI,BUF+13
	CALL ASCII_TO_BINARY        ;change day out to binary
	MOV DAY_OUT,AX

	MOV CX,2
	LEA DI,BUF+3
	CALL ASCII_TO_BINARY
	MOV MONTH_IN,AX

	MOV CX,2
	LEA DI,BUF+16
	CALL ASCII_TO_BINARY
	MOV MONTH_OUT,AX

	MOV CX,2
	LEA DI,BUF+6
	CALL ASCII_TO_BINARY
	MOV Y_IN,AX

	MOV CX,2
	LEA DI,BUF+19
	CALL ASCII_TO_BINARY
	MOV	Y_OUT,AX

	MOV AX,DAY_IN              ;check is a same day
	CMP AX,DAY_OUT
	JNE CAL_DAY
	MOV AX,MONTH_IN
	CMP AX,MONTH_OUT
	JNE CAL_DAY
	MOV AX,Y_IN
	CMP AX,Y_OUT
	JNE CAL_DAY
	JMP OUT_CAL

CAL_DAY: MOV AX,DAY_IN
		CMP AX,DAY_OUT
		JA DAY_IN_THAN_OUT
		MOV AX,DAY_OUT
		SUB AX,DAY_IN
		ADD DAY,AX
		JMP CAL_MONTH
DAY_IN_THAN_OUT: MOV CX,DAY_OUT
	ADD DAY,CX
	CMP MONTH_IN,1
	JNE MONTH2
	MOV BX,31
	SUB BX,DAY_IN
	ADD DAY,BX
	INC MONTH_IN
	JMP CAL_MONTH
MONTH2: CMP MONTH_IN,2
	JNE MONTH3
	MOV BX,28
	SUB BX,DAY_IN
	ADD DAY,BX
	INC MONTH_IN
	JMP CAL_MONTH
MONTH3: CMP MONTH_IN,3
	JNE MONTH4
	MOV BX,31
	SUB BX,DAY_IN
	ADD DAY,BX
	INC MONTH_IN
	JMP CAL_MONTH
MONTH4: CMP MONTH_IN,4
	JNE MONTH5
	MOV BX,30
	SUB BX,DAY_IN
	ADD DAY,BX
	INC MONTH_IN
	JMP CAL_MONTH
MONTH5: CMP MONTH_IN,5
	JNE MONTH6
	MOV BX,31
	SUB BX,DAY_IN
	ADD DAY,BX
	INC MONTH_IN
	JMP CAL_MONTH
MONTH6: CMP MONTH_IN,6
	JNE MONTH7
	MOV BX,30
	SUB BX,DAY_IN
	ADD DAY,BX
	INC MONTH_IN
	JMP CAL_MONTH
MONTH7: CMP MONTH_IN,7
	JNE MONTH8
	MOV BX,31
	SUB BX,DAY_IN
	ADD DAY,BX
	INC MONTH_IN
	JMP CAL_MONTH
MONTH8: CMP MONTH_IN,8
	JNE MONTH9
	MOV BX,31
	SUB BX,DAY_IN
	ADD DAY,BX
	INC MONTH_IN
	JMP CAL_MONTH
MONTH9: CMP MONTH_IN,9
	JNE MONTH10
	MOV BX,30
	SUB BX,DAY_IN
	ADD DAY,BX
	INC MONTH_IN
	JMP CAL_MONTH
MONTH10: CMP MONTH_IN,10
	JNE MONTH11
	MOV BX,31
	SUB BX,DAY_IN
	ADD DAY,BX
	INC MONTH_IN
	JMP CAL_MONTH
MONTH11: CMP MONTH_IN,11
	JNE MONTH12
	MOV BX,30
	SUB BX,DAY_IN
	ADD DAY,BX
	INC MONTH_IN
	JMP CAL_MONTH
MONTH12: CMP MONTH_IN,12
	MOV BX,31
	SUB BX,DAY_IN
	ADD DAY,BX
	INC MONTH_IN
	JMP CAL_MONTH

CAL_MONTH: CMP MONTH_IN,13
		JNE NOT_13
		MOV MONTH_IN,1
NOT_13:	MOV AX,MONTH_IN
		CMP AX,MONTH_OUT
		JE OUT_CAL

		CALL CDIM
		
OUT_CAL: RET
CAL_TIME	ENDP

CAL_COST	PROC

	MOV AX,DAY
	MOV BL,140
	MUL BL
	ADD COST,AX

	MOV AX,HOUR
	CMP HOUR,6
	JA	HOUR_MORE_THAN_6
	MOV BL,20
	MUL BL
	ADD COST,AX
	JMP RETURN_CAL_COST
HOUR_MORE_THAN_6: MOV BL,140
	MUL BL
	ADD COST,140

RETURN_CAL_COST: RET
CAL_COST	ENDP

ASCII_TO_BINARY	PROC
	MOV AX,0
	MOV SI,10
	SUB BX,BX
A_TO_B: MUL SI
	MOV BL,[DI]
	SUB BL,30H
	ADD AX,BX
	INC DI
	LOOP A_TO_B

	RET
ASCII_TO_BINARY ENDP

BINARY_TO_ASCII	PROC
	MOV DI,10
B_TO_A: CWD
	DIV DI
	ADD DX,'0'
	DEC BX
	MOV [BX],DL
	CMP AX,0
	JNE B_TO_A

	RET
BINARY_TO_ASCII	ENDP

CHECK_END_INPUT	PROC
	CMP BUF+6,30H
	JNE	NOT_0
	CMP BUF+7,30H
	JNE NOT_0

	CMP BUF+19,30H
	JNE NOT_0
	CMP BUF+20,30H
	JNE NOT_0
	JMP IN_0
	
NOT_0:  MOV END_INPUT,0
		RET
IN_0:	MOV END_INPUT,1
		RET
CHECK_END_INPUT ENDP

CDIM	PROC

CAL_DAY_IN_MONTH: CMP AX,1
		JNE M_2
		CMP AX,MONTH_OUT
		JE RETURN1
		ADD DAY,31
		INC AX
		CMP AX,MONTH_OUT
		JE	RETURN1
		JNE M_2
RETURN1: RET
M_2: CMP AX,2
		JNE M_3
		ADD DAY,28
		INC AX
		CMP AX,MONTH_OUT
		JE	RETURN1
M_3: CMP AX,3
		JNE M_4
		ADD DAY,31
		INC AX
		CMP AX,MONTH_OUT
		JE	RETURN2
M_4: CMP AX,4
		JNE M_5
		ADD DAY,30
		INC AX
		CMP AX,MONTH_OUT
		JE	RETURN2
		JNE M_5
RETURN2: RET
M_5: CMP AX,5
		JNE M_6
		ADD DAY,31
		INC AX
		CMP AX,MONTH_OUT
		JE	RETURN2
M_6: CMP AX,6
		JNE M_7
		ADD DAY,30
		INC AX
		CMP AX,MONTH_OUT
		JE	RETURN
M_7: CMP AX,7
		JNE M_8
		ADD DAY,31
		INC AX
		CMP AX,MONTH_OUT
		JE	RETURN
M_8: CMP AX,8
		JNE M_9
		ADD DAY,31
		INC AX
		CMP AX,MONTH_OUT
		JE	RETURN
M_9: CMP AX,9
		JNE M_10
		ADD DAY,30
		INC AX
		CMP AX,MONTH_OUT
		JE	RETURN
M_10: CMP AX,10
		JNE M_11
		ADD DAY,31
		INC AX
		CMP AX,MONTH_OUT
		JE	RETURN
M_11: CMP AX,11
		JNE M_12
		ADD DAY,30
		INC AX
		CMP AX,MONTH_OUT
		JE	RETURN
M_12: ADD DAY,31
		INC AX
		CMP AX,MONTH_OUT
		JE	RETURN
		MOV AX,1
		JMP CAL_DAY_IN_MONTH

RETURN: RET
CDIM	ENDP

PRINT	PROC
	LEA DX,DATE_IN		;print date in text
	MOV AH,9
	INT 21H
	
	MOV CX,8
	MOV BX,0
	CALL PRINT_DATE		;call to print date in
	
	LEA DX,TIME_TEXT	;print time text
	MOV AH,9
	INT 21H

	MOV CX,5
	MOV BX,8
	CALL PRINT_TIME		;call to print time in

	LEA DX,DATE_OUT		;print date out
	MOV AH,9
	INT 21H
	
	MOV CX,8
	MOV BX,13
	CALL PRINT_DATE		;print date out

	LEA DX,TIME_TEXT	;print time text
	MOV AH,9
	INT 21H

	MOV CX,5
	MOV BX,21
	CALL PRINT_TIME		;print time out

	LEA DX,TOTAL_TEXT	;print total text
	MOV AH,9
	INT 21H

	LEA BX,DAY_OUTPUT
	MOV CX,11
	CALL FILL_SPACE
	MOV AX,DAY
	CALL BINARY_TO_ASCII
	LEA DX,DAY_OUTPUT
	MOV AH,9
	INT 21H

	LEA BX,HOUR_OUTPUT
	MOV CX,16
	CALL FILL_SPACE
	SUB AX,AX
	MOV AX,HOUR
	CALL BINARY_TO_ASCII
	LEA DX,HOUR_OUTPUT
	MOV AH,9
	INT 21H

	LEA DX,COST_TEXT
	MOV AH,9
	INT 21H
	LEA BX,COST_OUTPUT
	MOV CX,12
	CALL FILL_SPACE
	MOV AX,COST
	CALL BINARY_TO_ASCII
	LEA DX,COST_OUTPUT
	MOV AH,9
	INT 21H

	RET
PRINT	ENDP

PRINT_TIME	PROC
P_TIME: MOV AH,2	
	MOV DL,BUF[BX]		;print charactor time
	INT 21H
	INC BX
	LOOP P_TIME

	LEA DX,END_LINE		;next line
	MOV AH,9
	INT 21H
	RET
PRINT_TIME	ENDP

PRINT_DATE	PROC
P_DATE: MOV DL,BUF[BX]	;print charactor date
	MOV AH,2
	INT 21H
	INC BX
	LOOP P_DATE
	RET
PRINT_DATE	ENDP

FILL_SPACE	PROC
FILL: MOV BYTE PTR[BX]," "
	INC BX
	LOOP FILL
	RET
FILL_SPACE	ENDP

CODE	ENDS
	END MAIN